/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/led/led.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

&led_strip { chain-length = <42>; };

/ {
    behaviors {
        tp: tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_PREFERRED";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    chosen { zmk,underglow = &led_strip; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // | TAB  |  Q  |  W  |  E  |  R  |    T    |   |  Y  |  U   |  I  |  O  |  P  | ESC |
            // | CTRL |  A  |  S  |  D  |  F  |    G    |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |    B    |   |  N  |  M   |  ,  |  .  |  /  | SHFT |
            //                    | GUI | RSE | ALT/ENT |   | BKSP | HYPER/SPC  | LWR |

            bindings = <
&mt LA(F4) ESCAPE         &kp Q    &kp W  &kp E                    &kp R      &kp T          &kp Y      &kp U      &kp I                 &kp O          &kp P                         &to 2
&mt LCTRL LC(W)           &kp A    &kp S  &kp D                    &lt 1 F    &kp G          &kp H      &lt 2 J    &kp K                 &kp L          &mt LC(LA(DELETE)) RIGHT_ALT  &kp ENTER
&mt LEFT_SHIFT LA(RIGHT)  &lt 3 Z  &kp X  &kp C                    &kp V      &kp B          &kp N      &kp M      &mt CAPSLOCK TAB      &mt COMMA DOT  &to 1                         &mt RIGHT_SHIFT QUESTION
                                          &mt LALT LA(LEFT_ARROW)  &mkp LCLK  &lt 3 SPACE    &kp SPACE  &mkp RCLK  &mt BACKSPACE DELETE
            >;
        };

        layer_below {
            // -----------------------------------------------------------------------------------------
            // |      |  !  |  @  |  #  |  $  |    %     |   |  ^  |  &  |  *  |  (  |  )  |   \   |
            // |      |  1  |  2  |  3  |  4  |    5     |   |  -  |  =  |  `  |  [  |  ]  |  "|"  |
            // | SHFT |  6  |  7  |  8  |  9  |    0     |   |  _  |  +  |  ~  |  {  |  }  | RSHFT |
            //                     | GUI |     | ALT/ENT |   | BKSP | HYPER/SPACE |    |

            bindings = <
&mt LA(F4) ESCAPE  &kp TILDE        &kp SQT         &kp UP_ARROW           &kp F4             &kp F5       &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp PLUS           &kp STAR                &to 0
&mt LCTRL LC(W)    &kp PRINTSCREEN  &kp LEFT_ARROW  &kp DOWN               &kp RIGHT          &kp F9       &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp MINUS          &kp BACKSPACE           &mt RIGHT_SHIFT COLON
&to 2              &lt 3 LEFT_WIN   &kp BACKSLASH   &kp LEFT_BRACKET       &kp RIGHT_BRACKET  &kp F11      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &mt LESS_THAN DOT  &mt GREATER_THAN COMMA  &kp SLASH
                                                    &mt LEFT_ALT LA(LEFT)  &mkp LCLK          &kp SPACE    &kp ENTER     &mkp RCLK     &kp NUMBER_0
            >;
        };

        ABLETON {
            bindings = <
&kp ESCAPE      &kp LC(Q)    &kp LC(LS(W))        &mt LC(LS(E)) LC(E)  &mt LC(LS(R)) LC(R)      &mt LC(LS(T)) LC(T)    &kp LC(Y)  &mt LC(LS(U)) LC(U)  &kp LC(I)      &kp LC(O)       &to 1         &to 0
&kp LCTRL       &kp LC(A)    &mt LC(LS(S)) LC(S)  &kp LC(D)            &mt LC(LS(LA(F))) LC(F)  &mt LC(LS(G)) LC(G)    &to 3      &kp LC(J)            &kp LC(K)      &kp LC(L)       &kp UP_ARROW  &kp DELETE
&kp LEFT_SHIFT  &lt 3 LC(Z)  &mt LC(LS(X)) LC(X)  &kp LC(C)            &kp LC(V)                &kp LC(LA(B))          &kp LC(N)  &kp LC(LS(M))        &kp LC(COMMA)  &kp LEFT_ARROW  &kp DOWN      &kp RIGHT
                                                  &kp LEFT_ALT         &mkp LCLK                &kp SPACE              &kp ENTER  &mkp RCLK            &kp BACKSPACE
            >;
        };

        layer_above {
            // -----------------------------------------------------------------------------------------
            // |  |  F1  |  F2  |  F3  |  F4  |  F5 |            |  F6  |  F7     |  F8     |  F9        |  F10     |     |
            // |  | Prev | Next | Vol - | Vol + | Play/Pause |   |      | LFT     | DWN     |  UP        |  RGT     |     |  HOME   |
            // |  BTCLR  | BT1 | BT2 | BT3 | BT4 | BT5 |   |            | RGB_TOG | RGB_EFF |  RGB_BRI   |  RGB_BRD |     |   END  |
            //                    |     |     |    |                  |     |     |     |

            bindings = <
&ext_power EP_ON  &trans        &trans        &trans        &trans        &trans          &kp INS          &kp HOME         &kp DELETE       &kp K_BACK         &kp END                           &ext_power EP_OFF
&trans            &trans        &trans        &trans        &out OUT_TOG  &trans          &kp C_PREV       &kp C_NEXT       &kp C_PP         &kp C_VOLUME_DOWN  &kp C_VOLUME_UP                   &kp K_MUTE
&bt BT_CLR        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &rgb_ug RGB_TOG  &rgb_ug RGB_EFF  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD    &rgb_ug RGB_COLOR_HSB(241,0,100)  &kp C_MUTE
                                              &trans        &trans        &trans          &trans           &trans           &trans
            >;
        };
    };
};
