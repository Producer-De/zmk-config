/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/led/led.h>
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&led_strip { chain-length = <42>; };

/ {
    behaviors {
        tp: tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_PREFERRED";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    chosen { zmk,underglow = &led_strip; };

    combos {
        compatible = "zmk,combos";

        deviceon {
            bindings = <&ext_power EP_ON>;
            key-positions = <0 1 2>;
        };

        deviceoff {
            bindings = <&ext_power EP_OFF>;
            key-positions = <11 10 9>;
        };

        ctrl+alt {
            bindings = <&kp LC(LEFT_ALT)>;
            key-positions = <12 37>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <12 38>;
        };

        left_alt+back {
            bindings = <&mt LEFT_ALT LA(LEFT_ARROW)>;
            key-positions = <12 36>;
        };

        out_toggle {
            bindings = <&out OUT_TOG>;
            key-positions = <24 16>;
        };

        BT1 {
            bindings = <&bt BT_SEL 0>;
            key-positions = <24 25>;
        };

        BT2 {
            bindings = <&bt BT_SEL 1>;
            key-positions = <24 26>;
        };

        BT3 {
            bindings = <&bt BT_SEL 2>;
            key-positions = <24 27>;
        };

        BT4 {
            bindings = <&bt BT_SEL 3>;
            key-positions = <24 28>;
        };

        BT5 {
            bindings = <&bt BT_SEL 4>;
            key-positions = <24 29>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <0 37>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <0 36>;
        };

        caps_lock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <0 38>;
        };

        ctrl_shift {
            bindings = <&kp LC(LEFT_SHIFT)>;
            key-positions = <38 25>;
        };

        scroll {
            bindings = <&mkp MB3>;
            key-positions = <37 16>;
        };

        ctrl1 {
            bindings = <&kp LC(NUMBER_1)>;
            key-positions = <37 27>;
        };

        ctrl2 {
            bindings = <&kp LC(NUMBER_2)>;
            key-positions = <37 28>;
        };

        ctrl3 {
            bindings = <&kp LC(NUMBER_3)>;
            key-positions = <37 29>;
        };

        ctrl4 {
            bindings = <&kp LC(NUMBER_4)>;
            key-positions = <37 15>;
        };

        ctrl5 {
            bindings = <&kp LC(N5)>;
            key-positions = <37 16>;
        };

        ctrl6 {
            bindings = <&kp LC(NUMBER_6)>;
            key-positions = <37 17>;
        };

        ctrl7 {
            bindings = <&kp LC(N7)>;
            key-positions = <37 3>;
        };

        ctrl8 {
            bindings = <&kp LC(N8)>;
            key-positions = <37 4>;
        };

        ctrl9 {
            bindings = <&kp LC(N9)>;
            key-positions = <37 5>;
        };

        underbar {
            bindings = <&kp UNDER>;
            key-positions = <16 18>;
        };

        hypen {
            bindings = <&kp MINUS>;
            key-positions = <16 20>;
        };

        apostrophe {
            bindings = <&kp SQT>;
            key-positions = <16 20>;
        };

        doublequotes {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <16 21>;
        };

        questionmark {
            bindings = <&kp QUESTION>;
            key-positions = <16 22>;
        };

        colon {
            bindings = <&kp COLON>;
            key-positions = <16 23>;
        };

        slash {
            bindings = <&kp SLASH>;
            key-positions = <16 35>;
        };

        period {
            bindings = <&kp PERIOD>;
            key-positions = <16 32>;
        };

        comma {
            bindings = <&kp COMMA>;
            key-positions = <16 33>;
        };

        altf4 {
            bindings = <&kp LA(F4)>;
            key-positions = <12 4>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Main {
            bindings = <
&mt LEFT_ALT ESCAPE    &mt LS(LCTRL) LC(NUMBER_1)  &mt LS(LEFT_ALT) W  &mt LS(LEFT_WIN) E  &mt LC(LEFT_ALT) R  &mt LC(LEFT_WIN) T    &mt LA(LEFT_WIN) Y        &mt LS(LC(LEFT_ALT)) U  &mt LS(LC(LEFT_WIN)) I       &mt LS(LA(LEFT_WIN)) O       &mt LC(LA(LEFT_WIN)) P       &mt LA(LEFT_WIN) TAB
&mt LCTRL RIGHT_ALT    &kp A                       &kp S               &kp D               &kp F               &kp G                 &kp H                     &kp J                   &kp K                        &kp L                        &lt 2 UP_ARROW               &mt LCTRL LEFT_WIN
&mt LEFT_SHIFT DELETE  &lt 3 Z                     &kp X               &kp C               &kp V               &kp B                 &kp N                     &kp M                   &to 2                        &mt LC(LEFT_WIN) LEFT_ARROW  &mt LS(LEFT_WIN) DOWN_ARROW  &mt LEFT_SHIFT RIGHT_ARROW
                                                                       &mkp MB2            &mkp MB1            &lt 1 SPACE           &mt LC(LEFT_SHIFT) SPACE  &mt LC(LEFT_ALT) ENTER  &mt LS(ALT_ERASE) BACKSPACE
            >;
        };

        Sub {
            // -----------------------------------------------------------------------------------------
            // |      |  !  |  @  |  #  |  $  |    %     |   |  ^  |  &  |  *  |  (  |  )  |   \   |
            // |      |  1  |  2  |  3  |  4  |    5     |   |  -  |  =  |  `  |  [  |  ]  |  "|"  |
            // | SHFT |  6  |  7  |  8  |  9  |    0     |   |  _  |  +  |  ~  |  {  |  }  | RSHFT |
            //                     | GUI |     | ALT/ENT |   | BKSP | HYPER/SPACE |    |

            bindings = <
&mt LEFT_ALT ESCAPE    &kp TILDE     &kp APOSTROPHE                &msc SCRL_UP                &kp DOUBLE_QUOTES               &kp F4       &mt F7 N7        &mt F8 N8        &mt F9 N9        &kp MINUS         &kp PLUS          &trans
&kp LCTRL              &kp STAR      &msc SCRL_LEFT                &msc SCRL_DOWN              &msc SCRL_RIGHT                 &kp F5       &mt F4 NUMBER_4  &mt F5 N5        &mt F6 NUMBER_6  &kp PERIOD        &msc MOVE_Y(10)   &kp BACKSPACE
&mt LEFT_SHIFT DELETE  &kp LEFT_WIN  &mt LC(LA(DELETE)) BACKSLASH  &mt LESS_THAN LEFT_BRACKET  &mt GREATER_THAN RIGHT_BRACKET  &kp F9       &mt F1 NUMBER_1  &mt F2 NUMBER_2  &mt F3 NUMBER_3  &msc MOVE_X(-10)  &msc MOVE_Y(-10)  &msc MOVE_X(10)
                                                                   &mkp MB2                    &mkp MB1                        &kp SPACE    &kp SPACE        &kp ENTER        &mt F11 N0
            >;
        };

        Ableton {
            bindings = <
&mkp MB3               &msc SCRL_UP  &mt W LC(LS(W))      &mt LC(LS(E)) LC(E)  &mt LC(LS(R)) LC(R)      &mt LC(LS(T)) LC(T)    &mt LC(Y) ESCAPE     &mt LC(LS(U)) LC(U)  &mt LC(LA(DELETE)) LC(I)  &kp LC(LA(O))   &mkp RCLK     &kp TAB
&mt LCTRL RIGHT_ALT    &kp LC(A)     &mt LC(LS(S)) LC(S)  &kp LC(D)            &mt LC(LS(LA(F))) LC(F)  &mt LC(LS(G)) LC(G)    &lt 3 DELETE         &kp LC(J)            &mt LC(K) ESCAPE          &kp LC(L)       &kp UP_ARROW  &lt 0 LC(LA(P))
&mt LEFT_SHIFT DELETE  &lt 3 LC(Z)   &mt LC(LS(X)) LC(X)  &kp LC(C)            &kp LC(V)                &kp LC(LA(B))          &mt LC(LS(N)) LC(N)  &mt LC(LS(M)) LC(M)  &to 0                     &kp LEFT_ARROW  &kp DOWN      &kp RIGHT
                                                          &mkp MB2             &mkp MB1                 &lt 1 SPACE            &kp SPACE            &kp ENTER            &mt LEFT_WIN LA(TAB)
            >;
        };

        Setting {
            // -----------------------------------------------------------------------------------------
            // |  |  F1  |  F2  |  F3  |  F4  |  F5 |            |  F6  |  F7     |  F8     |  F9        |  F10     |     |
            // |  | Prev | Next | Vol - | Vol + | Play/Pause |   |      | LFT     | DWN     |  UP        |  RGT     |     |  HOME   |
            // |  BTCLR  | BT1 | BT2 | BT3 | BT4 | BT5 |   |            | RGB_TOG | RGB_EFF |  RGB_BRI   |  RGB_BRD |     |   END  |
            //                    |     |     |    |                  |     |     |     |

            bindings = <
&trans        &mt LS(LCTRL) Q  &kp LS(LA(W))  &kp LS(LG(E))      &kp LC(LA(R))     &kp LC(LG(T))        &kp LA(LG(Y))    &kp LS(LC(LA(U)))  &kp LS(LC(LG(I)))     &kp LS(LA(LG(O)))  &kp LC(LA(LG(P)))                 &rgb_ug RGB_SAI
&bt BT_CLR    &bt BT_CLR_ALL   &out OUT_TOG   &ext_power EP_TOG  &ext_power EP_ON  &ext_power EP_OFF    &rgb_ug RGB_SAD  &kp C_MUTE         &kp C_VOL_DN          &kp C_VOL_UP       &rgb_ug RGB_BRI                   &rgb_ug RGB_BRD
&bt BT_SEL 0  &trans           &bt BT_SEL 1   &bt BT_SEL 2       &bt BT_SEL 3      &bt BT_SEL 4         &rgb_ug RGB_SPI  &rgb_ug RGB_SPD    &rgb_ug RGB_EFF       &rgb_ug RGB_EFR    &rgb_ug RGB_COLOR_HSB(241,0,100)  &rgb_ug RGB_COLOR_HSB(0,100,34)
                                              &mkp MB2           &mkp MB1          &kp SPACE            &kp SPACE        &kp ENTER          &mt LEFT_WIN LA(TAB)
            >;
        };
    };
};
